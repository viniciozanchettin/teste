name: CI & Deploy (python3)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    name: Run unit tests (python3)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies (python3)
        run: |
          python3 -m pip install --upgrade pip
          if [ -f requirements.txt ]; then python3 -m pip install -r requirements.txt; fi

      - name: Run tests (unittest)
        run: python3 -m unittest -v

  deploy:
    name: SSH rsync deploy (python3)
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare SSH key
        shell: bash
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_KEY}" > ~/.ssh/id_deploy
          chmod 600 ~/.ssh/id_deploy
          ssh-keyscan -p "${SSH_PORT}" "${SSH_HOST}" >> ~/.ssh/known_hosts
        env:
          SSH_KEY:  ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}

      - name: Rsync project to remote
        shell: bash
        run: |
          RSYNC_SSH="ssh -i ~/.ssh/id_deploy -p ${SSH_PORT} -o StrictHostKeyChecking=yes"
          RELEASE_DIR="${APP_DIR}/releases/${GITHUB_SHA}"
          ${RSYNC_SSH} "${SSH_USER}@${SSH_HOST}" "mkdir -p ${RELEASE_DIR}"
          rsync -az --delete \
            --exclude ".git" \
            --exclude ".github" \
            --exclude ".venv" \
            --exclude "tests" \
            -e "${RSYNC_SSH}" ./ "${SSH_USER}@${SSH_HOST}:${RELEASE_DIR}/"
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          APP_DIR:  ${{ secrets.APP_DIR }}

      - name: Install deps (venv python3), switch symlink, restart systemd
        shell: bash
        run: |
          SSH="ssh -i ~/.ssh/id_deploy -p ${SSH_PORT} -o StrictHostKeyChecking=yes ${SSH_USER}@${SSH_HOST}"

          $SSH bash -euo pipefail <<'REMOTE'
          set -euo pipefail

          APP_DIR="${APP_DIR}"
          RELEASE_DIR="${APP_DIR}/releases/${GITHUB_SHA}"
          CURRENT_LINK="${APP_DIR}/current"
          VENV_DIR="${APP_DIR}/.venv"
          SERVICE_NAME="${SERVICE_NAME}"

          # Ownership (ajuste user:group conforme seu servidor)
          sudo chown -R flaskapp:flaskapp "${APP_DIR}"

          # Create venv with python3 if missing
          if [ ! -d "${VENV_DIR}" ]; then
            python3 -m venv "${VENV_DIR}"
          fi

          # Upgrade pip and install requirements with python3 venv
          "${VENV_DIR}/bin/python3" -m pip install --upgrade pip
          if [ -f "${RELEASE_DIR}/requirements.txt" ]; then
            "${VENV_DIR}/bin/python3" -m pip install -r "${RELEASE_DIR}/requirements.txt"
          fi

          # Atomic switch
          ln -sfn "${RELEASE_DIR}" "${CURRENT_LINK}"
          sudo chown -h flaskapp:flaskapp "${CURRENT_LINK}"
          sudo chown -R flaskapp:flaskapp "${RELEASE_DIR}"

          # Restart systemd service
          sudo systemctl daemon-reload
          sudo systemctl restart "${SERVICE_NAME}.service"
          sudo systemctl --no-pager --full status "${SERVICE_NAME}.service" || true
REMOTE
        env:
          SSH_HOST:     ${{ secrets.SSH_HOST }}
          SSH_USER:     ${{ secrets.SSH_USER }}
          SSH_PORT:     ${{ secrets.SSH_PORT }}
          APP_DIR:      ${{ secrets.APP_DIR }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}

      - name: Deploy summary
        run: |
          echo "Deployed commit $GITHUB_SHA to ${APP_DIR}/current on ${SSH_HOST}"
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          APP_DIR:  ${{ secrets.APP_DIR }}
